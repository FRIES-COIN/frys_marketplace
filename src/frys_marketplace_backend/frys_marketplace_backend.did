type Inscription = record {
  id : nat64;
  status : InscriptionStatus;
  sat_point : nat64;
  owner : principal;
  metadata : InscriptionMetadata;
  data : text;
  rarity_score : float64;
  generation : nat64;
  content_type : text;
  transfer_history : vec TransferRecord;
  frys_amount : nat64;
  timestamp : nat64;
};
type InscriptionMetadata = record {
  creator : principal;
  creation_number : nat64;
  media_hash : text;
  external_url : opt text;
  name : text;
  description : text;
  collection_name : text;
  attributes : vec record { text; text };
  price : float64;
  license : opt text;
};
type InscriptionStatus = variant { Burned; Listed; Active; Locked };
type MintBatchRequest = record {
  total_frys_amount : nat64;
  requests : vec MintRequest;
};
type MintRequest = record {
  metadata : InscriptionMetadata;
  data : text;
  content_type : text;
  frys_amount : nat64;
};
type MintResponse = record {
  sat_point : nat64;
  rarity_score : float64;
  inscription_id : nat64;
  timestamp : nat64;
};
type Result = variant { Ok : vec MintResponse; Err : text };
type Result_1 = variant { Ok : MintResponse; Err : text };
type TransactionType = variant {
  Burn;
  List;
  Lock;
  Mint;
  Sale;
  Unlist;
  Unlock;
  Transfer;
};
type TransferRecord = record {
  to : principal;
  transaction_type : TransactionType;
  from : principal;
  timestamp : nat64;
  price : opt nat64;
};
service : {
  get_inscription : (nat64) -> (opt Inscription) query;
  get_inscriptions_by_generation : (nat64) -> (vec Inscription) query;
  get_inscriptions_by_sat_range : (nat64, nat64) -> (vec Inscription) query;
  get_rarest_inscriptions : (nat64) -> (vec Inscription) query;
  get_user_inscriptions : (principal) -> (vec Inscription) query;
  mint_batch : (MintBatchRequest) -> (Result);
  mint_inscription : (MintRequest) -> (Result_1);
  payment : (text, float64) -> (text);
}
